import React, { useCallback, useEffect, useState } from 'react';
import { Link, useParams, useHistory } from 'react-router-dom';

// material-ui
import { ChevronLeft, OpenInNew } from '@mui/icons-material';
import {
  AppBar,
  Box,
  Button,
  Grid,
  IconButton,
  Link as LinkMui,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Toolbar,
  Typography
} from '@mui/material';

import { differenceInCalendarDays, parseISO } from 'date-fns';
import { getSeverityColor } from 'pages/Risk/utils';
import { useAuthContext } from 'context';
import { Vulnerability as VulnerabilityType } from 'types';

export const Vulnerability: React.FC = () => {
  const { vulnerabilityId } = useParams<any>();
  const { apiGet, apiPut } = useAuthContext();
  const [vulnerability, setVulnerability] = useState<VulnerabilityType>();

  const history = useHistory();
  const fetchVulnerability = useCallback(async () => {
    try {
      const result = await apiGet<VulnerabilityType>(
        `/vulnerabilities/${vulnerabilityId}`
      );
      setVulnerability(result);
    } catch (e) {
      console.error(e);
    }
  }, [vulnerabilityId, apiGet]);

  const updateVulnerability = async (body: { [key: string]: string }) => {
    try {
      if (!vulnerability) return;
      const res = await apiPut<VulnerabilityType>(
        '/vulnerabilities/' + vulnerability.id,
        {
          body: body
        }
      );
      setVulnerability({
        ...vulnerability,
        state: res.state,
        substate: res.substate,
        actions: res.actions
      });
    } catch (e) {
      console.error(e);
    }
  };

  useEffect(() => {
    fetchVulnerability();
  }, [fetchVulnerability]);

  if (!vulnerability) return 'No Vulnerabilities';

  const references = vulnerability.references.map((ref) => ref);
  if (vulnerability.cve)
    references.unshift({
      name: 'NIST National Vulnerability Database',
      url: `https://nvd.nist.gov/vuln/detail/${vulnerability.cve}`,
      source: '',
      tags: []
    });

  const product =
    vulnerability.service &&
    vulnerability.service.products.find(
      (product) => vulnerability.cpe && product.cpe && vulnerability.cpe.includes(product.cpe)
    );
  // Calculates the total number of days a vulnerability has been open
  let daysOpen = 0;
  let lastOpenDate = vulnerability.createdAt;
  let lastState = 'open';
  vulnerability.actions.reverse();
  for (const action of vulnerability.actions) {
    if (action.state === 'closed' && lastState === 'open') {
      daysOpen += differenceInCalendarDays(
        parseISO(action.date),
        parseISO(lastOpenDate)
      );
      lastState = 'closed';
    } else if (action.state === 'open' && lastState === 'closed') {
      lastOpenDate = action.date;
      lastState = 'open';
    }
  }

  return (
    <React.Fragment>
      <Box ml={2} mt={2}>
        <Link
          to='# '
          onClick={() => history.goBack()}
        >
          <ChevronLeft
            style={{
              height: '100%',
              verticalAlign: 'middle',
              marginTop: '-2px'
            }}
          ></ChevronLeft>
          Go back
        </Link>
      </Box>
      <Grid container>
        <Grid item xs={1} xl={2} />
        <Grid item xs={10} xl={8}>
          <Typography variant='h4' gutterBottom mt={2}>
            Vulnerability Details
          </Typography>
          <Box sx={{ flexGrow: 1 }}>
            <AppBar position='static'>
              <Toolbar>
                <Typography variant='h6' component='div' sx={{ flexGrow: 1 }}>
                  {vulnerability.domain.name}
                </Typography>
                <IconButton
                  size='large'
                  edge='start'
                  color='inherit'
                  aria-label='menu'
                >
                  <OpenInNew />
                </IconButton>
              </Toolbar>
            </AppBar>
            <Box sx={{ bgcolor: 'white' }}>
              <Grid container>
                <Grid item xs={12} sm={5} minWidth='200px' sx={{ m: '15px' }}>
                  <Typography variant='h6'>Overview</Typography>
                  <Typography variant='body1'>
                    IP: {vulnerability.domain.ip}<br />
                    First Seen: {differenceInCalendarDays(
                      Date.now(),
                      parseISO(vulnerability.domain.createdAt)
                    )} days ago<br />
                    Last Seen: {differenceInCalendarDays(
                      Date.now(),
                      parseISO(vulnerability.domain.updatedAt)
                    )} days ago<br />
                    Country: {vulnerability.domain.country
                      ? vulnerability.domain.country
                      : 'Not found'}<br />
                    Organization: {vulnerability.domain.organization.name}<br />
                  </Typography>
                  <br />
                  <Typography variant='h6'>Installed (Known) Products</Typography>
                  <Typography variant='body1'>
                    Misc:<br />
                    Marketing:<br />
                    Networking:<br />
                    Web Framework:<br />
                    Web Server:<br />
                  </Typography>
                </Grid>
                <Grid item xs={12} sm={6} sx={{ m: '15px' }}>
                  <Typography variant='h6' mb={1}>Provenance</Typography>
                  <Typography variant='body1' component='div'>
                    <Box sx={{ lineHeight: 2 }}>
                      <b>Root Domain: </b> {vulnerability.domain.fromRootDomain}<br />
                      <b>Subdomain:</b> {vulnerability.domain.name} (
                      {vulnerability.domain.subdomainSource})<br />
                      <b>Service/Port:</b> {vulnerability.service.service
                        ? vulnerability.service.service
                        : vulnerability.service.port}{' '}
                      ({vulnerability.service.serviceSource})<br />
                      <b>Product:</b> {vulnerability.cpe}<br />
                      <b>Vulnerability:</b> {vulnerability.title} ({vulnerability.source})
                    </Box>
                  </Typography>
                </Grid>
              </Grid>
            </Box>
          </Box>
        </Grid>
        <Grid item xs={1} xl={2} />
        <Grid item xs={1} xl={2} />
        <Grid item xs={10} xl={8} mt={5}>
          <TableContainer component={Paper}>
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell>
                    <Link to='#'>
                      {vulnerability.cve} <OpenInNew />
                    </Link>
                  </TableCell>
                  <TableCell>
                    <span
                      style={{
                        borderBottom: `6px solid ${getSeverityColor({
                          id: vulnerability.severity ?? ''
                        })}`,
                        width: '80px'
                      }}
                    >
                      {vulnerability.severity}
                    </span>
                  </TableCell>
                  <TableCell>
                    {vulnerability.isKev ? 'Yes' : 'No'}
                  </TableCell>
                  <TableCell>
                    <Link to='#'>
                      {vulnerability.domain.name}
                    </Link>
                  </TableCell>
                  <TableCell>
                    {
                      product ? product.name + (product.version
                        ? ' ' + product.version : '')
                        : vulnerability.cpe
                    }
                  </TableCell>
                  <TableCell>
                    {
                      lastState === 'open'
                        ? daysOpen += differenceInCalendarDays(new Date(), parseISO(lastOpenDate))
                        : daysOpen
                    }
                  </TableCell>
                  <TableCell>
                    {
                      vulnerability.state[0].toUpperCase() + vulnerability.state.slice(1)
                      + ' ('
                      + vulnerability.substate[0].toUpperCase() + vulnerability.substate.slice(1)
                      + ')'
                    }
                  </TableCell>
                </TableRow>
              </TableHead>
            </Table>
          </TableContainer>
        </Grid>
        <Grid item xs={1} xl={2} />
        <Grid item xs={1} xl={2} />
        <Grid item xs={10} xl={8} mt={5}>
          <Grid container sx={{ backgroundColor: "white" }}>
            <Grid item sm={12} lg={7} p={2} sx={{ minWidth: 200 }}>
              <Typography variant='h6' mb={2}>{vulnerability.cve}</Typography>
              <Button
                size="small"
                variant="contained"
                sx={{ borderRadius: 28, textTransform: 'none' }}
                onClick={() => console.log()}
              >
                {
                  vulnerability.state[0].toUpperCase() + vulnerability.state.slice(1)
                  + ' ('
                  + vulnerability.substate[0].toUpperCase() + vulnerability.substate.slice(1)
                  + ')'
                }
              </Button>
              <Typography fontWeight={500} mt={2}>Description</Typography>
              <Typography variant='caption'>{vulnerability.description}</Typography>
              <Typography fontWeight='bold' mt={2} mb={2}>References</Typography>
              <TableContainer component={Paper}>
                <Table size="small" aria-label="a dense table">
                  <TableHead>
                    <TableRow
                      sx={{ "& th": { backgroundColor: "#07648D", color: "white" } }}
                    >
                      <TableCell>Hyperlink</TableCell>
                      <TableCell>Resource</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {vulnerability.references.map((row) => (
                      <TableRow key={row.name}>
                        <TableCell><LinkMui href={row.url}>{row.url}</LinkMui></TableCell>
                        <TableCell>{row.source}</TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </TableContainer>
              <br />
              <TableContainer component={Paper} sx={{ mt: 4, maxWidth: 500 }}>
                <Table size="small">
                  <TableHead>
                    <TableRow
                      sx={{ "& th": { backgroundColor: "#07648D", color: "white" } }}
                    >
                      <TableCell>CWE-ID</TableCell>
                      <TableCell>CWE Name</TableCell>
                      <TableCell>Source</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    <TableRow>
                      <TableCell><LinkMui href="#">{vulnerability.cwe}</LinkMui></TableCell>
                      <TableCell>?</TableCell>
                      <TableCell>{vulnerability.source}</TableCell>
                    </TableRow>
                  </TableBody>
                </Table>
              </TableContainer>
            </Grid>
            <Grid item sm={12} lg={5} p={2}>
              More info
            </Grid>
          </Grid>
        </Grid>
        <Grid item xs={12} sx={{ height: "400px" }} />
      </Grid>
    </React.Fragment>
  );
}
